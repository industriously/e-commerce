/**
 * @packageDocumentation
 * @module api.functional.orders.payment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { OrderUsecase } from "./../../../interface/order/order.usecase.interface";

/**
 * 결제 확인 요청 API
 * 
 * iamport 서비스에서 결제 후, 결제 확인 요청
 * 
 * @tag order
 * @tag payment
 * @throw 400 잘못된 토큰입니다.
 * 
 * @controller OrdersController.confirm()
 * @path POST /orders/:order_id/payment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function confirm
    (
        connection: IConnection,
        order_id: string,
        body: OrderUsecase.ConfirmBody
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        confirm.ENCRYPTED,
        confirm.METHOD,
        confirm.path(order_id),
        body,
        confirm.stringify
    );
}
export namespace confirm
{
    export type Input = OrderUsecase.ConfirmBody;

    export const METHOD = "POST" as const;
    export const PATH: string = "/orders/:order_id/payment";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(order_id: string): string
    {
        return `/orders/${encodeURIComponent(order_id)}/payment`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}